type Todo {
  id: ID!
  name: String!
  description: String
}

type Person {
  id: ID!
  name: String!
  age: Int!
  posts(filter: ModelPostFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelPostConnection
}

type Post {
  id: ID!
  title: String!
  content: String!
  created_at: String!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelTodoConnection {
  items: [Todo]
  nextToken: String
}

input ModelStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input ModelIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input ModelIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input ModelFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input ModelBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input ModelTodoFilterInput {
  id: ModelIDFilterInput
  name: ModelStringFilterInput
  description: ModelStringFilterInput
  and: [ModelTodoFilterInput]
  or: [ModelTodoFilterInput]
  not: ModelTodoFilterInput
}

type Query {
  getTodo(id: ID!): Todo
  listTodos(filter: ModelTodoFilterInput, limit: Int, nextToken: String): ModelTodoConnection
  getPerson(id: ID!): Person
  listPersons(filter: ModelPersonFilterInput, limit: Int, nextToken: String): ModelPersonConnection
  getPost(id: ID!): Post
  listPosts(filter: ModelPostFilterInput, limit: Int, nextToken: String): ModelPostConnection
}

input CreateTodoInput {
  id: ID
  name: String!
  description: String
}

input UpdateTodoInput {
  id: ID!
  name: String
  description: String
}

input DeleteTodoInput {
  id: ID
}

type Mutation {
  createTodo(input: CreateTodoInput!): Todo
  updateTodo(input: UpdateTodoInput!): Todo
  deleteTodo(input: DeleteTodoInput!): Todo
  createPerson(input: CreatePersonInput!): Person
  updatePerson(input: UpdatePersonInput!): Person
  deletePerson(input: DeletePersonInput!): Person
  createPost(input: CreatePostInput!): Post
  updatePost(input: UpdatePostInput!): Post
  deletePost(input: DeletePostInput!): Post
}

type Subscription {
  onCreateTodo: Todo @aws_subscribe(mutations: ["createTodo"])
  onUpdateTodo: Todo @aws_subscribe(mutations: ["updateTodo"])
  onDeleteTodo: Todo @aws_subscribe(mutations: ["deleteTodo"])
  onCreatePerson: Person @aws_subscribe(mutations: ["createPerson"])
  onUpdatePerson: Person @aws_subscribe(mutations: ["updatePerson"])
  onDeletePerson: Person @aws_subscribe(mutations: ["deletePerson"])
  onCreatePost: Post @aws_subscribe(mutations: ["createPost"])
  onUpdatePost: Post @aws_subscribe(mutations: ["updatePost"])
  onDeletePost: Post @aws_subscribe(mutations: ["deletePost"])
}

type ModelPersonConnection {
  items: [Person]
  nextToken: String
}

input ModelPersonFilterInput {
  id: ModelIDFilterInput
  name: ModelStringFilterInput
  age: ModelIntFilterInput
  and: [ModelPersonFilterInput]
  or: [ModelPersonFilterInput]
  not: ModelPersonFilterInput
}

input CreatePersonInput {
  id: ID
  name: String!
  age: Int!
}

input UpdatePersonInput {
  id: ID!
  name: String
  age: Int
}

input DeletePersonInput {
  id: ID
}

type ModelPostConnection {
  items: [Post]
  nextToken: String
}

input ModelPostFilterInput {
  id: ModelIDFilterInput
  title: ModelStringFilterInput
  content: ModelStringFilterInput
  created_at: ModelStringFilterInput
  and: [ModelPostFilterInput]
  or: [ModelPostFilterInput]
  not: ModelPostFilterInput
}

input CreatePostInput {
  id: ID
  title: String!
  content: String!
  created_at: String!
  personPostsId: ID
}

input UpdatePostInput {
  id: ID!
  title: String
  content: String
  created_at: String
  personPostsId: ID
}

input DeletePostInput {
  id: ID
}
